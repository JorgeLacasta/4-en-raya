import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.Icon;
import javax.swing.ImageIcon;

public class JuegoRayas{
	
	int contadorTurnosRojo = 0,
		contadorTurnosAmarillo = 0;
	
	static boolean  turno,
					ganador = false,
					juegaPC = false
					;
	
	private Tablero tablero = new Tablero()
					;
	
	private JFrame ventana = new JFrame ("4 en raya")
					;
	
	private JLabel  jugador1,
					jugador2,
					empate,
					copyright = new JLabel("© Compañia SergioMola - 2019"),
					version = new JLabel("v 1.3"),
					labelFichero = new JLabel(),
					tableroFoto = constructorFotos(7, 53, 600, 520)
					;
	
	private JLabel [][] fichasAmarillas = constructorFichas("Ficha Amarilla.png"),
						fichasRojas = constructorFichas("Ficha Roja.png")
						;
	
	private JPanel  panelTablero = new JPanel(),
					panelMenu = new JPanel(),
					panelFichero = new JPanel(),
					panelTextField
					;
	
	private JButton jugar,
					menu,
					puntuaciones,
					salir,
					test,
					PvP,
					botonOK,
					volverMenu,
					boton0,
					boton1,
					boton2,
					boton3,
					boton4,
					boton5,
					boton6
					;
	
	private Jugador player1 = new Jugador(1);
	private Jugador	player2 = new Jugador(2);
	
	private Fichero file = new Fichero();
	
	private TextField panelTF = new TextField();
	private final static Border line = new LineBorder(Color.BLUE);
	private final static Border margin = new EmptyBorder(5, 15, 5, 15);
	private final static Border compound = new CompoundBorder(line, margin);
	//true = jugador 1
	//false = jugador 2
	
	private JuegoRayas() {
		int y = 100;
		//menu
		PvP = setFondoBotones(y);
		PvP.setText("PvP");
		y += 100;
		test = setFondoBotones(y);
		test.setText("Test");
		y += 100;
		puntuaciones = setFondoBotones(y);
		puntuaciones.setText("Puntuaciones");
		y += 100;
		salir = setFondoBotones(y);
		salir.setText("Salir del juego");
		
		copyright.setBounds(20, 530, 300, 50);
		copyright.setForeground(Color.BLUE);
		
		version.setBounds(570, 530, 50, 50);
		version.setForeground(Color.BLUE);
		
		//boton del textField
		botonOK = setFondoBotones(y);
		botonOK.setText("OK");
		botonOK.setVisible(true);
		
		//label que muestra las puntuaciones
		labelFichero.setBounds(7, 10, 600, 560);
		labelFichero.setBorder(compound);
		labelFichero.setForeground(Color.WHITE);
		labelFichero.setBackground(Color.BLACK);
		labelFichero.setHorizontalTextPosition(JLabel.CENTER);
		labelFichero.setVerticalTextPosition(JLabel.CENTER);
		//label.setVerticalAlignment(SwingConstants.TOP);
				
		//TABLERO
		jugador1 = setLabel();
		jugador2 = setLabel();
		empate = setLabel();
		setTextLabel();
		tableroFoto = constructorFotos(7, 53, 600, 520);
		//".\\resources\\tablero.png",
		tableroFoto.setVisible(true);
		
		//botones
		setBotones();
		//turno aleatorio
		turnoAleatorio();
		
		//establecimiento de paneles
		setMenu();
		setPvP();
		setTextField();
		setPanelFichero();
		
		//crea la ventana y sus dimensiones
		ventana.setSize(620, 605);
		ventana.setResizable(false);
		ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ventana.setContentPane(panelMenu);
		ventana.setVisible(true);
	}
	
	private void setTextLabel() {
		jugador1.setText("Turno: " +player1.getNombre()+ " - "+player1.getColor());
		jugador2.setText("Turno: " +player2.getNombre()+ " - "+player2.getColor());
		empate.setText("Empate");
	}
	
	private JLabel setLabel () {
		JLabel label = new JLabel ();
		label.setBounds(80, 10, 350,40);
		label.setForeground(Color.WHITE);
		label.setVisible(false);
		return label;
	}
	private JButton setFondoBotones (int y) {
		JButton boton = new JButton();
		boton.setBounds(200, y, 200, 50);
		boton.setVisible(true);
		boton.setBorder(compound);
		boton.setForeground(Color.WHITE);
		ImageIcon icon = new ImageIcon("fondo.jpg");
		//ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource("fondo.jpg"));
		Image scaledImg = icon.getImage().getScaledInstance(boton.getWidth(), boton.getHeight(), Image.SCALE_DEFAULT);  
		icon = new ImageIcon(scaledImg);
		boton.setIcon(icon);
		boton.setHorizontalTextPosition(JButton.CENTER);
		//boton.setVerticalTextPosition(JButton.CENTER);
		
		return boton;
	}
	
	private int randomPC () {
		return (int) (Math.random()*7);
	}
	
	private void compruebaPC () {
		resetTableroPC();
		int columna;
		while (!tablero.ganador()) {
			columna = randomPC();
			compruebaTodo(columna);
		}
	}
	private void turnoAleatorio () {
		
		int n = (int) (Math.random()*2);
		//false al comienzo, porque se pueden superponer 2 label
		//al ejecutar turnoAleatorio con el boton Juego Nuevo
		jugador1.setVisible(false);
		jugador2.setVisible(false);	
		if (n == 0) {
			turno = true;
			jugador1.setVisible(true);
		}else {
			turno = false;
			jugador2.setVisible(true);	
		}
	}
	
	private void cambioTurno () {
		
		if (turno) {
			turno = false;
			jugador1.setVisible(false);
			jugador2.setVisible(true);			
		}else {
			turno = true;
			jugador1.setVisible(true);
			jugador2.setVisible(false);
		}
	}
	
	private JLabel [][] constructorFichas (String imagen){
		
		JLabel [][] ficha = new JLabel [6][7];
		int x = 18;
		int y = 60;
		
		for (int i = 0; i < ficha.length; i++) {
			for (int j = 0; j < ficha[i].length; j++) {
				JLabel label = new JLabel();
				label.setBounds(x,y,76,76);
				ImageIcon foto = new ImageIcon(imagen);
				//ImageIcon foto = new ImageIcon(getClass().getClassLoader().getResource(imagen));
				Icon icono = new ImageIcon(foto.getImage().getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_DEFAULT));
				label.setIcon(icono);
				ficha [i][j] = label;
				ficha [i][j].setVisible(false);
				
				x += 84;
			}
			y += 84;
			x = 18;
		}
		return ficha;
	}
	
	private void resetFichas () {
		
		for (int i = 0; i < fichasAmarillas.length; i++) {
			for (int j = 0; j < fichasAmarillas[i].length; j++) {
				fichasAmarillas [i][j].setVisible(false);
				fichasRojas [i][j].setVisible(false);
			}
		}
	}
	
	private JLabel constructorFotos (int n1, int n2, int n3, int n4) {	//construye el Label con las fotos
		
		JLabel foto = new JLabel();
		foto.setBounds(n1, n2, n3, n4);
		ImageIcon img = new ImageIcon("tablero.png");		
		//ImageIcon fot = new ImageIcon(getClass().getClassLoader().getResource("tablero.png"));
		Icon icono = new ImageIcon(img.getImage().getScaledInstance(foto.getWidth(), foto.getHeight(), Image.SCALE_DEFAULT));
		foto.setIcon(icono);		
		foto.setVisible(false);
		
		return foto;
	}
	
	private JButton configBotonesTablero (int x) {
		//configura los botones de las columnas
		JButton boton = new JButton();
		boton.setBounds(x, 52, 90, 520);
		boton.setContentAreaFilled(false);
		boton.setBorderPainted(false);
		return boton;
	}
	
	private void setBotones () {
		//establezco los botones
		int x = 5;
		
		for(int i = 0; i < 7; i++) {
			switch (i) {
			case 0: boton0 = configBotonesTablero(x);
			break;
			case 1: boton1 = configBotonesTablero(x);
			break;
			case 2: boton2 = configBotonesTablero(x);
			break;
			case 3: boton3 = configBotonesTablero(x);
			break;
			case 4: boton4 = configBotonesTablero(x);
			break;
			case 5: boton5 = configBotonesTablero(x);
			break;
			case 6: boton6 = configBotonesTablero(x);
			break;
			}
			x += 85;
		}
		jugar = setFondoBotones(10);
		jugar.setBounds(330, 10, 120, 40);
		jugar.setText("Juego Nuevo");
		
		menu = setFondoBotones(10);
		menu.setBounds(460, 10, 100, 40);
		menu.setText("Menú");
		
		volverMenu = setFondoBotones(10);
		volverMenu.setBounds(460, 10, 100, 40);
		volverMenu.setText("Menú");
		
	}
	
	private Tablero tableroNuevo() {
		Tablero tablero = new Tablero();
		return tablero;
	}
	
	private void resetTableroPC() {
		tablero = tableroNuevo();
		jugador1.setText("Turno: PC 1- ROJO");
		jugador2.setText("Turno: PC 2- AMARILLO");
		resetFichas();
		turnoAleatorio();
	}
	
	private void resetTablero() {
		contadorTurnosRojo = 0;
		contadorTurnosAmarillo = 0;
		panelTF.setTextBox();
		tablero = tableroNuevo();
		resetFichas();
		turnoAleatorio();
	}

	private void compruebaTodo (int columna) {
		
		if (tablero.contador < 42 && !tablero.ganador()) {
			if(tablero.anotar(columna)) {
				if (turno) {		//turno jugador1
					fichasRojas[tablero.getFila()][columna].setVisible(true);
					player1.setCantidadTurnos(++contadorTurnosRojo);
					if (tablero.ganador()) {
						jugador2.setVisible(false);
						jugador1.setText(player1.getNombre()+" gana");
						file.setInfo(player1.getNombre(), player1.getColor(), player1.getCantidadTurnos());
						file.cambiaFichero();
						labelFichero.setText(file.getHTML());
					}else if (tablero.contador == 42) {	
						jugador1.setVisible(false);
						empate.setVisible(true);
					}else {
						tablero.resetFila();
						cambioTurno();	
					}
				}else { 	//turno jugador2
					fichasAmarillas[tablero.getFila()][columna].setVisible(true);
					player2.setCantidadTurnos(++contadorTurnosAmarillo);
					if (tablero.ganador()) {
						jugador1.setVisible(false);
						jugador2.setText(player2.getNombre()+" gana");
						file.setInfo(player2.getNombre(), player2.getColor(), player2.getCantidadTurnos());
						file.cambiaFichero();
						labelFichero.setText(file.getHTML());
					}else if (tablero.contador == 42) {	
						jugador2.setVisible(false);
						empate.setVisible(true);
					}else {
						tablero.resetFila();
						cambioTurno();	
					}
				}
			}
		}
	}
	
	private void setTextField() {
		//panelTF.setTextBox();
		panelTextField = panelTF.getPanel();
		panelTextField.add(botonOK);
	}
	private void setPvP () {
		
		panelTablero.setLayout(null);
		panelTablero.add(jugar);
		panelTablero.add(menu);
		
		for (int i = 0; i < fichasRojas.length; i++) {
			for (int k = 0; k < fichasRojas[i].length; k++) {
				panelTablero.add(fichasAmarillas [i][k]);
				panelTablero.add(fichasRojas [i][k]);
			}
		}
		
		panelTablero.add(boton0);
		panelTablero.add(boton1);
		panelTablero.add(boton2);
		panelTablero.add(boton3);
		panelTablero.add(boton4);
		panelTablero.add(boton5);
		panelTablero.add(boton6);
		panelTablero.add(tableroFoto);
		panelTablero.add(jugador1);
		panelTablero.add(jugador2);
		panelTablero.add(empate);
		panelTablero.setBackground(Color.black);
		
	}
	
	private void setPanelFichero() {
		labelFichero.setText(file.getHTML());
		panelFichero.setLayout(null);
		panelFichero.setBackground(Color.BLACK);
		panelFichero.add(labelFichero);
		panelFichero.add(volverMenu);
		
	}
	
	private void setMenu () {
		
		panelMenu.setLayout(null);
		panelMenu.add(PvP);
		panelMenu.add(test);
		panelMenu.add(puntuaciones);
		panelMenu.add(salir);
		panelMenu.add(version);
		panelMenu.add(copyright);
		panelMenu.setBackground(Color.black);
	}
	
	private void setMouseListener () {
		MouseListener al = new MouseListener () {
			int columna;
			
			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				if (e.getSource().equals(boton0)){
					columna = 0;
				}else if (e.getSource().equals(boton1)){
					columna = 1;
				}else if (e.getSource().equals(boton2)){
					columna = 2;
				}else if (e.getSource().equals(boton3)){
					columna = 3;
				}else if (e.getSource().equals(boton4)){
					columna = 4;
				}else if (e.getSource().equals(boton5)){
					columna = 5;
				}else if (e.getSource().equals(boton6)){
					columna = 6;
				}
				
				compruebaTodo(columna);
			}

			@Override
				public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
				public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
				public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
			
				
			}
			
			@Override
				public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}			
			};
			boton0.addMouseListener(al);
			boton1.addMouseListener(al);
			boton2.addMouseListener(al);	
			boton3.addMouseListener(al);
			boton4.addMouseListener(al);
			boton5.addMouseListener(al);	
			boton6.addMouseListener(al);
			
	}
	
	private JFrame exe () {
		
		ActionListener action = new ActionListener () {
			@Override
			public void actionPerformed(ActionEvent act) {
				
				if (act.getSource().equals(PvP)) {
					//ventana.setVisible(false);
					ventana.setContentPane(panelTextField);
					ventana.setVisible(true);
					
				}else if (act.getSource().equals(botonOK)) {
					
					juegaPC = false;
					panelTF.setNames();
					if(panelTF.getNameP1().equals("") && panelTF.getNameP2().equals("")) {
						player1 = new Jugador(1);
						player2 = new Jugador(2);
					}else if(panelTF.getNameP1().equals("")) {
						player1 = new Jugador(1);
						player2 = new Jugador(panelTF.getNameP2(),"Amarillo");
					}else if(panelTF.getNameP2().equals("")) {
						player1 = new Jugador(panelTF.getNameP1(),"Rojo");
						player2 = new Jugador(2);
					}else {
						player1 = new Jugador(panelTF.getNameP1(),"Rojo");
						player2 = new Jugador(panelTF.getNameP2(),"Amarillo");
					}
					setTextLabel();
					//ventana.setVisible(false);
					ventana.setContentPane(panelTablero);
					ventana.setVisible(true);
				}else if (act.getSource().equals(test)) {
					//ventana.setVisible(false);
					juegaPC = true;
					resetTableroPC();
					ventana.setContentPane(panelTablero);
					ventana.setVisible(true);
					compruebaPC();
				}else if (act.getSource().equals(puntuaciones)) {
					//ventana.setContentPane(panelFichero);
					ventana.setContentPane(panelFichero);
					ventana.setVisible(true);
				}else if (act.getSource().equals(salir)) {
					ventana.dispose();
				}else if (act.getSource().equals(jugar)) {
					if (juegaPC) {
						empate.setVisible(false);
						resetTableroPC();
						compruebaPC();
					}else {
						empate.setVisible(false);
						setTextLabel();
						resetTablero();
					}
				}else if (act.getSource().equals(menu)) {
					resetTablero();
					ventana.setContentPane(panelMenu);
				}else if (act.getSource().equals(volverMenu)) {
					ventana.setContentPane(panelMenu);
				}
			}
		};
		
		PvP.addActionListener(action);
		test.addActionListener(action);
		puntuaciones.addActionListener(action);
		salir.addActionListener(action);
		botonOK.addActionListener(action);
		jugar.addActionListener(action);
		menu.addActionListener(action);
		volverMenu.addActionListener(action);
		setMouseListener();
		
		return ventana;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		JuegoRayas appRayas = new JuegoRayas();
		appRayas.exe();
	}


}
